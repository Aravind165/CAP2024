/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length==0)
            return null;
        if(preorder.length==1)
            return new TreeNode(preorder[0]);
        List<Integer> ls = new ArrayList<>();
        List<Integer> ls1= new ArrayList<>();
        for(int i:preorder){
            ls.add(i);
        }
        for(int i:inorder){
            ls1.add(i);
        }
        return construct(ls,ls1,0,ls.size()-1); 
    }
    public TreeNode construct(List<Integer> ls,List<Integer> ls1,int lb,int ub){
        if(lb>ub)
            return null;
        int t=ls.remove(0);
        TreeNode node = new TreeNode(t);
        node.left = construct(ls,ls1,lb,ls1.indexOf(t)-1);
        node.right = construct(ls,ls1,ls1.indexOf(t)+1,ub);
        return node;
    }
}