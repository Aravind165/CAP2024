import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    /*
     * Complete the 'bfs' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. INTEGER m
     *  3. 2D_INTEGER_ARRAY edges
     *  4. INTEGER s
     */

    public static List<Integer> bfs(int n, int m, List<List<Integer>> edges, int s) {
    // Write your code here
        List<List<Integer>> ls = new ArrayList<>();
        for(int i=0;i<n+1;i++){
            ls.add(new ArrayList<Integer>());
        }
        for(int i=0;i<m;i++){
            ls.get(edges.get(i).get(0)).add(edges.get(i).get(1));
            ls.get(edges.get(i).get(1)).add(edges.get(i).get(0));
        }
        boolean[] visted = new boolean[n+1];
        int[] dist = new int[n+1];
        dist[s]=0;
        Queue<Pair> que = new LinkedList<>();
        int v=0;
        que.offer(new Pair(s,0));
        visted[s]=true;
        while(!que.isEmpty()){
            int l = que.size();
            for(int i=0;i<l;i++){
                Pair p = que.poll();
                dist[p.val]=p.dis;
                for(int k:ls.get(p.val)){
                    if(!visted[k]){
                        visted[k]=true;
                        que.offer(new Pair(k,p.dis+6));
                    }
                }
            }
        }
        for(int i=0;i<n+1;i++){
            if(!visted[i]){
                dist[i]=-1;
            }
        }
        List<Integer> dis = new ArrayList<>();
        for(int i=1;i<n+1;i++){
            if(i!=s){
                dis.add(dist[i]);
            }
        }
        return dis;
    }
    

}
class Pair{
    int val,dis;
    Pair(int val,int dis){
        this.val=val;
        this.dis=dis;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        for (int qItr = 0; qItr < q; qItr++) {
            String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

            int n = Integer.parseInt(firstMultipleInput[0]);

            int m = Integer.parseInt(firstMultipleInput[1]);

            List<List<Integer>> edges = new ArrayList<>();

            for (int i = 0; i < m; i++) {
                String[] edgesRowTempItems = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

                List<Integer> edgesRowItems = new ArrayList<>();

                for (int j = 0; j < 2; j++) {
                    int edgesItem = Integer.parseInt(edgesRowTempItems[j]);
                    edgesRowItems.add(edgesItem);
                }

                edges.add(edgesRowItems);
            }

            int s = Integer.parseInt(bufferedReader.readLine().trim());

            List<Integer> result = Result.bfs(n, m, edges, s);

            for (int i = 0; i < result.size(); i++) {
                bufferedWriter.write(String.valueOf(result.get(i)));

                if (i != result.size() - 1) {
                    bufferedWriter.write(" ");
                }
            }

            bufferedWriter.newLine();
        }

        bufferedReader.close();
        bufferedWriter.close();
    }
}
