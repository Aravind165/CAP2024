import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    /*
     * Complete the 'prims' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. 2D_INTEGER_ARRAY edges
     *  3. INTEGER start
     */

    public static int prims(int n, List<List<Integer>> edges, int start) {
    // Write your code here
        ArrayList<ArrayList<Pair>> ls = new ArrayList<>();
        for(int i=0;i<=n;i++){
            ls.add(new ArrayList<Pair>());
        }
        boolean[] visited  = new boolean[n+1];
        for(int i=0;i<edges.size();i++){
            ls.get(edges.get(i).get(0)).add(new Pair(edges.get(i).get(1),edges.get(i).get(2)));
            ls.get(edges.get(i).get(1)).add(new Pair(edges.get(i).get(0),edges.get(i).get(2)));
        }
        PriorityQueue<Pair> que = new PriorityQueue<>();
        que.add(new Pair(start,0));
        int min=0;
        int c=0;
        while(!que.isEmpty() && c!=n){
            Pair p = que.poll();
            if(!visited[p.ver]){
                min+=p.wei;
                c++;
            }
            visited[p.ver]=true;
            for(Pair b:ls.get(p.ver)){
                if(!visited[b.ver]){
                    que.offer(new Pair(b.ver,b.wei));
                }
            }
        }
        return min;
    }

}
class Pair implements Comparable<Pair>{
    int ver,wei;
    Pair(int ver,int wei){
        this.ver=ver;
        this.wei=wei;
    }
    public int compareTo(Pair p){
        return wei-p.wei;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int m = Integer.parseInt(firstMultipleInput[1]);

        List<List<Integer>> edges = new ArrayList<>();

        for (int i = 0; i < m; i++) {
            String[] edgesRowTempItems = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

            List<Integer> edgesRowItems = new ArrayList<>();

            for (int j = 0; j < 3; j++) {
                int edgesItem = Integer.parseInt(edgesRowTempItems[j]);
                edgesRowItems.add(edgesItem);
            }

            edges.add(edgesRowItems);
        }

        int start = Integer.parseInt(bufferedReader.readLine().trim());

        int result = Result.prims(n, edges, start);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
